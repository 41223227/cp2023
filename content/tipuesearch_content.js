var tipuesearch = {"pages": [{'title': 'About', 'text': 'mdecycu/cmsite: cmsimde template uses mdecycu/cmsimde as submodule (github.com) \n', 'tags': '', 'url': 'About.html'}, {'title': 'ANSIC', 'text': '1. \n #include <stdio.h>\n\nint main()  \n{\n    // Print Name\n    printf("Name   : Alexandra Abramov\\n"); \n\n    // Print Date of Birth\n    printf("DOB    : July 14, 1975\\n"); \n\n    // Print Mobile Number\n    printf("Mobile : 99-9999999999\\n"); \n\n    // Indicate successful execution\n    return(0); \n} \n \n 2. \n #include <stdio.h>\n\nint main(int argc, char** argv) {\n    // Check for C standard version\n    #if __STDC_VERSION__ >=  201710L\n        printf("We are using C18!\\n");\n    #elif __STDC_VERSION__ >= 201112L\n        printf("We are using C11!\\n");\n    #elif __STDC_VERSION__ >= 199901L\n        printf("We are using C99!\\n");\n    #else\n        printf("We are using C89/C90!\\n");\n    #endif\n\n    // Indicate successful execution\n    return 0;\n} \n \n 3. \n #include <stdio.h>\n\nint main() {\n   int radius;      /* Variable to store the radius of the circle */\n   float area, perimeter;    /* Variables to store the area and perimeter of the circle */ \n   radius = 6;      /* Assigning a value to the radius */\n\n   /* Calculating the perimeter of the circle */\n   perimeter = 2 * 3.14 * radius;\n   printf("Perimeter of the Circle = %f inches\\n", perimeter);\n\n   /* Calculating the area of the circle */\n   area = 3.14 * radius * radius;\n   printf("Area of the Circle = %f square inches\\n", area);\n\n   return(0);\n} \n \n 4. \n #include <stdio.h>\n\nint main()\n{\n    int days, years, weeks;\n\n    days = 1329; // Total number of days\n\n    // Converts days to years, weeks and days\n    years = days/365; // Calculate years\n    weeks = (days % 365)/7; // Calculate weeks\n    days = days - ((years*365) + (weeks*7)); // Calculate remaining days\n\n    // Print the results\n    printf("Years: %d\\n", years);\n    printf("Weeks: %d\\n", weeks);\n    printf("Days: %d \\n", days);\n\n    return 0;\n} \n \n 5. \n #include <stdio.h>\nint main() {\n    float S = 0;\n    int i;\n\n    // Loop to calculate the sum\n    for(i=1; i<=50; i++) {\n        S += (float)1/i;\n    }\n\n    // Print the result\n    printf("Value of S: %.2f\\n", S);\n\n    return 0;\n} \n \n 6. \n #include<stdio.h>\n#define MAX 10\n\nint main() {\n    int n, a, bi_nom;\n\n    // Print header\n    printf("Mx   ");\n    for (n = 0; n <= 10; ++n)\n        printf("%d   ", n);\n    printf("\\n----------------------------------------------------------\\n");\n\n    n = 0;\n\n    do {\n        a = 0, bi_nom = 1;    \n        printf("%2d", n);\n\n        while (a <= n) {\n            if (n == 0 || a == 0)\n                printf("%4d", bi_nom);\n            else {\n                bi_nom = bi_nom * (n - a + 1) / a;\n                printf("%4d", bi_nom);\n            }\n            a = a + 1;\n        }\n\n        printf("\\n");\n        n = n + 1;\n    } while (n <= MAX);\n\n    // Print footer\n    printf("----------------------------------------------------------");\n\n    return 0;\n} \n \n 7. \n #include <stdio.h>\n#define N 10\n\nint main() {\n  char chr;\n  printf("\\n");\n\n  // Loop through ASCII values from 65 (\'A\') to 122 (\'z\')\n  for (chr = 65; chr <= 122; chr = chr + 1) {\n    // Exclude characters between \'Z\' and \'a\'\n    if (chr > 90 && chr < 97)\n      continue;\n\n    printf("[%2d-%c] ", chr, chr);\n  }\n\n  return 0;\n} \n \n 8. \n #include<stdio.h>\nint main()\n{\n    // Define a string containing lowercase and uppercase letters\n    char* letters = "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ";\n    int n;\n\n    // Print header\n    printf("List of integer equivalents of letters (a-z, A-Z).\\n");\n    printf("==================================================\\n");\n\n    // Loop through each character and print its integer equivalent\n    for(n=0; n<53; n++) {\n        printf("%d\\t", letters[n]);\n\n        // Add a newline every 6 characters for better formatting\n        if((n+1) % 6 == 0)\n             printf("\\n");\n    }\n\n    return 0;\n} \n \n 9. \n #include<stdio.h>\nint main()\n{\n    int x; // Declare variable x\n\n    // Print header for table\n    printf("x\\tx+2\\tx+4\\tx+6\\n\\n");\n    printf("---------------------------\\n");\n\n    // Loop to generate and print table values\n    for(x=1; x<=15; x+=3)\n        printf("%d\\t%d\\t%d\\t%d\\n", x, (x+2), (x+4), (x+6));    \n\n    return 0; // Indicate successful program execution\n} \n \n 10. \n #include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdbool.h>\nint main(void) {\n    // Display title\n    printf("Size of C data types:\\n\\n");\n    // Display column headers\n    printf("%-20s %-20s\\n", "Type", "Bytes");\n    // Display separator line\n    printf("--------------------------------\\n");\n    // Print size of various data types\n    printf("%-20s %lu\\n", "char", sizeof(char));\n    printf("%-20s %lu\\n", "int8_t", sizeof(int8_t));\n    printf("%-20s %lu\\n", "unsigned char", sizeof(unsigned char));\n    printf("%-20s %lu\\n", "uint8_t", sizeof(uint8_t));\n    printf("%-20s %lu\\n", "short", sizeof(short));\n    printf("%-20s %lu\\n", "int16_t", sizeof(int16_t));\n    printf("%-20s %lu\\n", "uint16_t", sizeof(uint16_t));\n    printf("%-20s %lu\\n", "int", sizeof(int));\n    printf("%-20s %lu\\n", "unsigned", sizeof(unsigned));\n    printf("%-20s %lu\\n", "long", sizeof(long));\n    printf("%-20s %lu\\n", "unsigned long", sizeof(unsigned long));\n    printf("%-20s %lu\\n", "int32_t", sizeof(int32_t));\n    printf("%-20s %lu\\n", "uint32_t", sizeof(uint32_t));\n    printf("%-20s %lu\\n", "long long", sizeof(long long));\n    printf("%-20s %lu\\n", "int64_t", sizeof(int64_t));\n    printf("%-20s %lu\\n", "unsigned long long", sizeof(unsigned long long));\n    printf("%-20s %lu\\n", "uint64_t", sizeof(uint64_t));\n    printf("%-20s %lu\\n", "float", sizeof(float));\n    printf("%-20s %lu\\n", "double", sizeof(double));\n    printf("%-20s %lu\\n", "long double", sizeof(long double));\n    printf("%-20s %lu\\n", "bool", sizeof(bool));\n    // Add a newline for better output formatting\n    printf("\\n");\n    // Indicate successful execution of the program\n    return 0;\n} \n \n', 'tags': '', 'url': 'ANSIC.html'}, {'title': 'c_ex', 'text': '', 'tags': '', 'url': 'c_ex.html'}, {'title': 'jsliu_c_programming:', 'text': '1. \n /* ====================\n Say Hello World! Bye Bye.\n==================== */\n#include <stdio.h>\nint main()\n{\n/* 印出 Hello World! Bye Bye */\nprintf("Hello World! "); printf("Bye "); printf("Bye");\nreturn 0;\n} \n \n 2. \n /* ====================\n變數宣告的例子 3.\n==================== */\n#include <stdio.h>\nint main()\n{\nint a = 1;\nint A = 8;\nint b = 2, c;\nc = A - a + b;\n/* 輸出 a, A, b, c 到螢幕 */\nprintf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );\nreturn 0;\n}\n \n \n 3. \n #include <stdio.h>\nvoid main()\n{\nfloat a = 0.5;\ndouble b = 1.2;\nint c = 3;\nb = b + a + c;\n/* 輸出 a, b, c 到螢幕 */\nprintf( " a = %3.1f, b = %3.1f, c = %d ", a ,b, c );\n}\n \n \n 4. \n /* =========================\n輸入一個整數\n========================= */\n#include <stdio.h>\nint main()\n{\nint i;\nprintf("Input an integer:");\nscanf( "%d", &i ); /* ch 前面加個 &(位址運算元) */\nprintf( "the number is %d", i );\nreturn 0;\n}\n \n \n 5. \n /* ====================\n基本運算範例.\n==================== */\n#include<stdio.h>\nint main()\n{\nint a,b;\na = 10; b = 3;\nprintf( "%d \\n", a * b );\nprintf( "%d \\n", a / b );\nprintf( "%d \\n", a + b );\nprintf( "%d \\n", a - b );\nprintf( "%d \\n", a % b );\nreturn 0;\n} \n \n 6. \n /* ====================\n關係運算元的範例.\n==================== */\n#include <stdio.h>\nint main()\n{\nint a = 10, b = 5;\nprintf( " a == b is %d \\n", a == b );\nprintf( " a > b is %d \\n", a > b );\nprintf( " a < b is %d \\n", a < b );\nprintf( " a >= b is %d \\n", a >= b );\nprintf( " a <= b is %d \\n", a <= b );\nprintf( " a != b is %d \\n", a != b );\nprintf( "\\n" );\nb = 10;\nprintf( " a == b is %d \\n", a == b );\nprintf( " a > b is %d \\n", a > b );\nprintf( " a < b is %d \\n", a < b );\nprintf( " a >= b is %d \\n", a >= b );\nprintf( " a <= b is %d \\n", a <= b );\nprintf( " a != b is %d \\n", a != b );\nreturn 0;\n} \n \n 7. \n \n /* ====================\n位元運算元的範例.\n==================== */\n#include<stdio.h>\nvoid main()\n{\nint a,b;\na = 15;\nb = 1;\nprintf("%d \\n", a | b ); /* a OR b */\nprintf("%d \\n", a & b ); /* a AND b */\nprintf("%d \\n", a ^ b ); /* a XOR b */\nprintf("%d \\n", a << 1 ); /* a 位元左移 1 位 */\nprintf("%d \\n", a >> 1 ); /* a 位元右移一位 */\nprintf("%d \\n", ~a ); /* A 的補數運算 */\n}\n \n \n 8. \n /* ====================\n Logical NOT.\n==================== */\n#include <stdio.h>\nvoid main()\n{\nint a;\na = 3;\nprintf("%d\\n", !a );\na = 0;\nprintf("%d\\n", !a );\n} \n \n 9. \n /* ====================\n sizeof 的範例.\n==================== */\n #include <stdio.h>\nvoid main()\n{\nchar a;\nprintf( " The size of int is %d \\n", sizeof(int) );\nprintf( " The size of char a is %d \\n", sizeof(a) );\n} \n \n 10. \n /* ====================\n Function (2)\n==================== */\n#include <stdio.h>\nfloat circle( int r ); /* 宣告 circle 的 prototype */\nvoid main()\n{\nfloat answer;\nanswer = circle(8);\nprintf( " 圓周長度是 %f", answer );\n}\n/* ====================\n circle 函數, 計算 circle 的圓周長\n==================== */\nfloat circle( int r )\n{\nfloat result;\nresult = 3.14159 * (double)2 * r;\nreturn ( result );\n} \n \n', 'tags': '', 'url': 'jsliu_c_programming:.html'}, {'title': 'introduce to c:', 'text': '1. \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* demonstrate a nested forloop */\nmain()\n{\n float this_is_a_number, total;\n int i, j;\n total = 0;\n/* outer forloop goes round 10 times */\n for (i = 0;i < 10;i++)\n {\n /* inner forloop goes round twice */\n for (j = 0;j < 2;j++)\n {\n printf("Please enter a number:\\n ");\n scanf("%f", &this_is_a_number); /* read number in */\n total = total + this_is_a_number;\n }\n }\n printf("Total Sum is = %f\\n", total);\n} \n \n 2. \n /*quad3 - first attempt at quadratic solver*/\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n#include <math.h>\nmain()\n{\n double a, b, c, xa, xb;\n /* prompt and read in coefficients of x^2,x and constant */\n printf("enter a value");\n scanf("%lf", &a);\n printf("enter b value");\n scanf("%lf", &b);\n printf("enter c value");\n scanf("%lf", &c);\n if (pow(b, 2) < 4 * a*c) /* test for real root */\n {\n /* not real root */\n printf("Not a real root");\n }\n else\n {\n /* real root */\n xa = (-b + sqrt(pow(b, 2) - (4 * a*c))) / (2 * a);\n xb = (-b - sqrt(pow(b, 2) - (4 * a*c))) / (2 * a);\n printf("Roots are %lf and %lf", xa, xb);\n }\n} \n \n 3. \n /* Montecarlo */\n/* integration using monte carlo */\n/* by counting relative areas */\n/* integrates y=x^2 to your specified limits */\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\nmain()\n{\n double x, y;\n double yupper, ylower, xupper, xlower;\n double montearea, area;\n double totalexparea, totalarea;\n int j;\n int iterations;\n printf("enter lower limit\\n");\n scanf("%lf", &xlower);\n printf("enter upper limit\\n");\n scanf("%lf", &xupper);\n printf("xlower %lf xupper %lf\\n", xlower, xupper);\n yupper = pow(xupper, 2);\n ylower = pow(xlower, 2);\n printf("ylower %lf yupper %lf\\n", ylower, yupper);\n area = yupper * (xupper - xlower);\n printf("outer area is %lf\\n", area);\n printf("enter iterations \\n");\n scanf("%d", &iterations);\n totalarea = 0;\n totalexparea = 0;\n for (j = 1;j < iterations;j++)\n {\n x = rand() % 1000;/* generate random number for x up to 1000 */\n y = rand() % 1000;/* generate random number for y up to 1000 */\n y = y / 1000;/* Divide by 1000 so our number is between 0 and 1 */\n x = x / 1000;/* Divide by 1000 so our number is between 0 and 1 */\n x = xlower + (xupper - xlower)*x;/* Adjust x value to be \nbetween required limits */\n y = yupper * y;/* Adjust y value to be between required limits */\n if (x >= xlower)\n {\n totalarea = totalarea + 1;/* add 1 to count of points \nwithin whole area */\n /* test if this y value is below the curve */\n if (y <= pow(x, 2))\n {\n totalexparea = totalexparea + 1;/* add 1 to count \nof points below the curve */\n }\n }\n }\n if (totalarea != 0)\n {\n montearea = area * (totalexparea / totalarea);/* calculate the \narea below the curve */\n }\n printf("monte area is %lf\\n", montearea);\n} \n \n 4. \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* demonstrate a do loop */\nmain()\n{\n float this_is_a_number, total;\n int i;\n total = 0;\n i = 0;\n /* do loop goes round until the value of i reaches 10 */\n do {\n printf("Please enter a number:\\n ");\n scanf("%f", &this_is_a_number);\n total = total + this_is_a_number;\n i++;\n }while( i < 10);\n printf("Total Sum is = %f\\n", total);\n} \n \n 5. \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* program to show array use */\nint main()\n{\n int arr1[8];/* define an array of 8 integers */\n int i;\n printf("enter 8 integer numbers\\n");\n for (i = 0;i < 8;i++)\n {\n scanf("%d", &arr1[i]);/* read into arr1[i] */\n }\n printf("Your 8 numbers are \\n");\n for (i = 0;i < 8;i++)\n {\n printf("%d ", arr1[i]);\n }\n printf("\\n");\n} \n \n 6. \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* program to show character array use */\nint main()\n{\n char arr2[10];/* define array of 10 characters */\n int i;\n printf("enter 10 characters \\n");\n for (i = 0;i < 10;i++)\n {\n scanf("%c", &arr2[i]);\n }\n printf("Your 10 characters are \\n");\n for (i = 0;i < 10;i++)\n {\n printf("%c ", arr2[i]);\n }\n printf("\\n");\n} \n \n 7. \n #define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n#include <math.h>\n/* Illustration of the common trigonometric functions */\nint main()\n{\n#define PI 3.14159265\n double angle, radianno, answer;\n /* The cosine function */\n printf("cosine function:\\n ");\n printf("Please enter angle in degrees:\\n ");\n scanf("%lf", &angle);\n printf("You entered %lf\\n", angle);\n radianno = angle * (2 * PI / 360);\n answer = cos(radianno);\n printf("cos of %lf is %lf\\n", angle, answer);\n /* The sine function */\n printf("sine function:\\n ");\n printf("Please enter angle in degrees:\\n ");\n scanf("%lf", &angle);\n printf("You entered %lf\\n", angle);\n radianno = angle * (2 * PI / 360);\n answer = sin(radianno);\n printf("sin of %lf is %lf\\n", angle, answer);\n /* The tangent function */\n printf("tangent function:\\n ");\n printf("Please enter angle in degrees:\\n ");\n scanf("%lf", &angle);\n printf("You entered %lf\\n", angle);\n radianno = angle * (2 * PI / 360);\n answer = tan(radianno);\n printf("tan of %lf is %lf\\n", angle, answer);\n return 0;\n} \n \n 8. \n /* regression */\n/* user enters points.*/\n/* regression of y on x calculated */\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n#include <math.h>\nmain()\n{\n float xpoints[10],ypoints[10];\n float sigmax,sigmay,sigmaxy,sigmaxsquared,xbar,ybar;\n float fltcnt,sxy,sxx,b,a;\n int i,points;\n printf("enter number of points (max 10 ) \\n");\n scanf("%d", &points);\n if(points>10)\n {\n printf("error - max of 10 points\\n");\n }\n else\n {\n sigmax=0;\n sigmay=0;\n sigmaxy=0;\n sigmaxsquared=0;\n /* user enters points from scatter graph */\n for(i=0;i<points;i++)\n {\n printf("enter point (x and y separated by space) \\n");\n scanf("%f %f", &xpoints[i], &ypoints[i]);\n sigmax=sigmax+xpoints[i];\n sigmay=sigmay+ypoints[i];\n sigmaxy=sigmaxy+xpoints[i]*ypoints[i];\n sigmaxsquared=sigmaxsquared+(float)pow(xpoints[i],2);\n }\n printf("points are \\n");\n for(i=0;i<points;i++)\n {\n printf(" \\n");\n printf("%f %f", xpoints[i], ypoints[i]);\n }\n printf(" \\n");\n fltcnt=(float)points;\n /* Calculation of (xbar,ybar)- the mean points*/\n /* and sxy and sxx from the formulas*/\n xbar=sigmax/fltcnt;\n ybar=sigmay/fltcnt;\n sxy=(1/fltcnt)*sigmaxy-xbar*ybar;\n sxx=(1/fltcnt)*sigmaxsquared-xbar*xbar;\n /* calculation of b and a from the formulas */\n b=sxy/sxx;\n a=ybar-b*xbar;\n /* Print the equation of the regression line */\n printf("Equation of regression line y on x is\\n ");\n printf(" y=%f + %fx", a,b);\n printf(" \\n");\n }\n} \n \n 9. \n /* radioactive decay simulation */\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n#include <math.h>\n#include <stdlib.h>\n#include <time.h>\nmain()\n{\n int j,timelimit,nuc;\n double randnumber,timeinc,lambda,timecount,probunittime;\n FILE *fptr;\n time_t t;\n srand((unsigned) time(&t)); /* random number generator seed */\n fptr=fopen("radioact.dat","w");\n /* Ask user to input specific data */\n /* initial number of nuclei, the value of lambda, time for experiment */\n printf("Enter initial number of nuclei : ");\n scanf("%d",&nuc);\n printf("Enter lambda : ");\n scanf("%lf",&lambda);\n printf("Enter time : ");\n scanf("%d",&timelimit);\n /* time increment of loop */\n timeinc=0.001/lambda;\n printf("Time increment :%lf",timeinc);\n /* (delta t * lambda) */\n probunittime=0.001*lambda;\n timecount=0;\n /* Monte Carlo loop */\n while(timecount<=timelimit)\n {\n fprintf(fptr,"%lf %d\\n",timecount,nuc);\n timecount=timecount+timeinc;\n for(j=0;j<=nuc;j++)\n {\n randnumber=rand()%1000;\n randnumber=randnumber/1000;\n /* Monte Carlo method checks random number less than (delta t * \nlambda) */\n if(randnumber<=probunittime)\n nuc=nuc-1;/* If less, then prob. that nucleus has \ndecayed */\n if(nuc<=0)\ngoto nuclimitreached;\n }\n }\nnuclimitreached: fclose(fptr); /* nuclei limit or time limit reached */\n} \n \n 10. \n /* Buffon\'s Needle Simulation (Monte Carlo)*/\n#define _CRT_SECURE_NO_WARNINGS\n#include <stdlib.h>\n#include <stdio.h>\n#include <math.h>\n#include <time.h>\n#define PI 3.141592654\nmain()\n{\n time_t t;\n int i, throws, count;\n double randno, anglerand;\n srand((unsigned)time(&t));/* set the random number seed */\n printf("Enter number of throws ");\n scanf("%d", &throws);\n count = 0;\n for (i = 1; i <= throws; i++)\n {\n randno = rand() % 1000;\n randno = randno / 1000;/* randno is the random number */\n anglerand = rand() % 1000;\n anglerand = anglerand / 1000;\n anglerand = 0.5*PI*anglerand; /* anglerand is the angle random \nnumber*/\n if (randno <= sin(anglerand))\n count = count + 1; /* Add to count */\n }\n printf("PI is %lf \\n", 2 * (double)i / (double)count);\n} \n \n', 'tags': '', 'url': 'introduce to c:.html'}, {'title': 'W16', 'text': '1. \n #include <gd.h>\n#include <stdio.h>\n#include <math.h>\n\n#define WIDTH 800\n#define HEIGHT 600\n#define SCALE 100\n\nvoid drawResistor(gdImagePtr im, int x1, int y, int width, int height) {\n    int startX = x1 ;\n    int endX = x1 + width ;\n\n    // 第一段直线向前走一段\n    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上45度\n    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2 , startX + width / 4 + height / 2 + 4 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 4 * height, y - height / 2, startX + width / 4 + height / 2 + 5 * height, y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n  // 向上45度\n    gdImageLine(im, startX + width / 4 + height / 2 + 5 * height, y + height / 2, startX + width / 4 + height / 2 + 5 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n\n  gdImageLine(im, startX + width / 4 + height / 2 + 5 * height + height / 2, y, startX + width / 4 + height / 2 + 5 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n\n  {\n    int startX = 100;\n  gdImageColorAllocate(im, 0, 0, 255);\n\n\n    // 第一段直线向前走一段\n    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上45度\n    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上45度\n      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n\n    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n }\n\n  {\n    int startX = 585;\n  gdImageColorAllocate(im, 0, 0, 255);\n\n\n    // 第一段直线向前走一段\n    gdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上45度\n    gdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n  // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上90度\n    gdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n        // 向下90度\n    gdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n    // 向上45度\n      gdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n\n    gdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n    gdImageLine(im, 100, y +20, 700, y +20, gdImageColorAllocate(im, 0, 255, 0));\n\n}\n}\n\nint main() {\n    gdImagePtr im;\n    FILE *outputFile;\n\n    // 创建图像对象\n    im = gdImageCreateTrueColor(WIDTH, HEIGHT);\n    if (im == NULL) {\n        fprintf(stderr, "Error creating GD image.\\n");\n        return 1;\n    }\n\n    outputFile = fopen("1.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n\n    int black, white, red, blue, green;\n\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    red = gdImageColorAllocate(im, 255, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 0, 255);\ngreen = gdImageColorAllocate(im, 0, 255, 0);\n    gdImageFilledRectangle(im, 0, 0, WIDTH - 1, HEIGHT - 1, white);\n\n    // 绘制墙面\n    gdImageLine(im, SCALE, SCALE, SCALE, HEIGHT - SCALE, black);\n    gdImageLine(im, WIDTH - SCALE, SCALE, WIDTH - SCALE, HEIGHT - SCALE, black);\n\n// 绘制彈簧\n    drawResistor(im, WIDTH / 3 + SCALE / 2, HEIGHT / 2, SCALE / 2, SCALE / 4);\n\n    // 绘制质量（方形）\n    gdImageFilledRectangle(im, WIDTH / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);\n    gdImageFilledRectangle(im, WIDTH * 2 / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH * 2 / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);\n\n  gdImageFilledRectangle(im, 100, HEIGHT +300, 700, HEIGHT /2 +49 , black);\n\n\n\n    gdImagePng(im, outputFile);\n    fclose(outputFile);\n    gdImageDestroy(im);\n\n    return 0;\n} \n \n 2. \n #include <stdio.h>\n#include <math.h>\n\n#define TIME_STEP 0.01 // 时间步长\n#define SIMULATION_TIME 10.0 // 模拟时间\n\n// 物体的参数\n#define m1 2.0\n#define m2 3.0\n#define k1 0.5\n#define k2 1.0\n#define k3 1.5\n#define c1 0.25\n#define c2 0.33\n#define c3 0.5\n#define X1_initial 1.0\n#define X2_initial -0.5\n#define V0 0.0\n\n// 计算阻尼力\ndouble dampingForce(double c, double v) {\n    return -c * v;\n}\n\n// 模拟物体运动\nvoid simulateMotion() {\n    double X1 = X1_initial;\n    double X2 = X2_initial;\n    double V1 = V0;\n    double V2 = V0;\n\n    FILE *fp;\n    fp = fopen("motion_data.txt", "w");\n\n    for (double t = 0; t <= SIMULATION_TIME; t += TIME_STEP) {\n        double F1 = -k1 * (X1 - 0) - c1 * (V1 - 0); // 第一个物体受到的合力\n        double F2 = -k2 * (X2 - X1) - c2 * (V2 - V1); // 第二个物体受到的合力\n        double F3 = -k3 * (X2 - 0) - c3 * (V2 - 0); // 第二个物体受到的合力\n\n        double a1 = F1 / m1; // 第一个物体的加速度\n        double a2 = F2 / m2; // 第二个物体的加速度\n\n        // 更新速度和位置\n        V1 += a1 * TIME_STEP;\n        V2 += a2 * TIME_STEP;\n\n        X1 += V1 * TIME_STEP;\n        X2 += V2 * TIME_STEP;\n\n  // 在文件写入时记录 m1 和 m2 的位置和速度数据\n  fprintf(fp, "%lf %lf %lf %lf %lf\\n", t, X1, X2, V1, V2);\n    }\n\n\n    fclose(fp);\n}\n\nint main() {\n    simulateMotion();\n    return 0;\n} \n #include <stdio.h>\n\nint main() {\n    FILE *gnuplotPipe = popen("gnuplot", "w");\n    if (gnuplotPipe) {\n        fprintf(gnuplotPipe, "set terminal png\\n");\n        fprintf(gnuplotPipe, "set output \'motion_plot.png\'\\n");\n        fprintf(gnuplotPipe, "set xlabel \'Time\'\\n");\n        fprintf(gnuplotPipe, "set ylabel \'Position / Velocity\'\\n");\n        fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines title \'m1 position\', \'motion_data.txt\' using 1:3 with lines title \'m2 position\', \'motion_data.txt\' using 1:4 with lines title \'m1 velocity\', \'motion_data.txt\' using 1:5 with lines title \'m2 velocity\'\\n");\n        fprintf(gnuplotPipe, "exit\\n");\n        fflush(gnuplotPipe);\n        pclose(gnuplotPipe);\n    } else {\n        printf("Error opening pipe to Gnuplot.\\n");\n    }\n    return 0;\n}\n \n \n \n', 'tags': '', 'url': 'W16.html'}, {'title': 'W15', 'text': '第一題: \n // https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n// 圖形繪製函數\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("roc_list_coord_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width / 4);\n    int center_y = (int)(height / 4);\n    int sun_radius = (int)(width / 8);\n    int white_circle_dia = sun_radius;\n    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n    red = gdImageColorAllocate(img, 255, 0, 0);// 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255);// 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149);// 藍色\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n  // 第二組 ABED 四個點的座標\n  int ax2, ay2, bx2, by2, ex2, ey2, dx2, dy2;\n  gdPoint points2[4];\n\n  ax2 = 375;\n  ay2 = 70;\n  bx2 = 264;\n  by2 = 179;\n  ex2 = 224;\n  ey2 = 329;\n  dx2 = 224;\n  dy2 = 329;\n\n  // 連接第二組 ABED 四個點的座標\n  gdImageLine(img, ax2, ay2, bx2, by2, white);\n  gdImageLine(img, bx2, by2, ex2, ey2, white);\n  gdImageLine(img, ex2, ey2, dx2, dy2, white);\n  gdImageLine(img, dx2, dy2, ax2, ay2, white);\n\n}\n\n  void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n      float deg = M_PI/180;\n      float sr = sun_radius/tan(75*deg);\n      int ax, ay, bx, by, dx, dy, ex, ey;\n      gdPoint points[4];\n\n      ax = center_x;\n      ay = center_y - sun_radius;\n      bx = center_x - sun_radius*tan(15*deg);\n      by = center_y;\n      ex = center_x;\n      ey = center_y + sun_radius;\n      dx = center_x + sun_radius*tan(15*deg);\n      dy = center_y;\n\n      // 連接第二組 ABED 四個點的座標\n      gdImageLine(img, ax, ay, bx, by, color);\n      gdImageLine(img, bx, by, ex, ey, color);\n      gdImageLine(img, ex, ey, dx, dy, color);\n      gdImageLine(img, dx, dy, ax, ay, color);\n  }\n \n \n 第二題:交點程式 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\nvoid find_intersection(int x1, int y1, int x2, int y2, int cx, int cy, int cr);\n\nint main() {\n    // Your existing code here\n\n    int width = 1200;\n    int height = (int)(width * 2.0 / 3.0);\n    int center_x = (int)(width / 4);\n    int center_y = (int)(height / 4);\n    int sun_radius = (int)(width / 8);\n    int white_circle_dia = sun_radius;\n    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n\n    find_intersection(375, 70, 264, 179, center_x, center_y, blue_circle_dia / 2);\n    find_intersection(264, 179, 224, 329, center_x, center_y, blue_circle_dia / 2);\n    find_intersection(224, 329, 224, 329, center_x, center_y, blue_circle_dia / 2);\n    find_intersection(224, 329, 375, 70, center_x, center_y, blue_circle_dia / 2);\n\n    // Your existing code here\n\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    // Your existing code here\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    // Your existing code here\n}\n\nvoid find_intersection(int x1, int y1, int x2, int y2, int cx, int cy, int cr) {\n    float m, c, A, B, C, det, t;\n\n    m = (float)(y2 - y1) / (x2 - x1);\n\n    c = y1 - m * x1;\n\n    A = 1 + m * m;\n    B = -2 * cx + 2 * m * (c - cy);\n    C = cx * cx + (c - cy) * (c - cy) - cr * cr;\n\n    det = B * B - 4 * A * C;\n\n    if (det >= 0) {\n        t = (-B + sqrt(det)) / (2 * A);\n        int x = x1 + t * (x2 - x1);\n        int y = y1 + t * (y2 - y1);\n        printf("Intersection point: (%d, %d)\\n", x, y);\n    }\n\n    t = (-B - sqrt(det)) / (2 * A);\n    int x = x1 + t * (x2 - x1);\n    int y = y1 + t * (y2 - y1);\n    printf("Intersection point: (%d, %d)\\n", x, y);\n} \n 教學影片', 'tags': '', 'url': 'W15.html'}, {'title': '線上繪圖', 'text': '列印 10 次 Hello World \n \n', 'tags': '', 'url': '線上繪圖.html'}, {'title': 'w13', 'text': '// 使用標準輸入/輸出函數\n#include <stdio.h>\n \nint main() {\n    // 輸出名為motion_data.txt的檔案\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n \n    // 模擬運動10秒並計算位移和速度，同時將資料寫入文件\n    double x = 0.2;  // 初始位移\n    double v = 0.0;  // 初始速度\n    double dt = 0.01; // 時間步長\n    double t = 0.0;  // 時間\n \n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // 此處修改系統參數\n        v += acceleration * dt;\n        x += v * dt;\n \n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n \n        t += dt;\n    }\n \n    // 關閉資料檔案\n    fclose(outputFile);\n \n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n \n     \n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    // 在images資料夾輸出名為motion_plot.png的檔案\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n \n    // 關閉 Gnuplot 進程\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n \n    return 0;\n}\n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w12', 'text': '// 使用標準輸入/輸出函數\n#include <stdio.h>\n// 繪製gd函式庫\n#include <gd.h>\n\nint main() {\n    int width = 800;\n    int height = 600;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n\nfprintf(stderr, "Error opening the output file.\\n");\n\nreturn 1;\n    }\n\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n\n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n\n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w7', 'text': '// 使用標準輸入/輸出函數\n#include <stdio.h>\n// 繪製gd函式庫\n#include <gd.h>\n// 繪製數學函數庫\n#include <math.h>\n\n// void因不會回傳任何值而用於紀錄所需的各項指令及參數\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    // 國旗長寬比為 3:2\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n    int sun_radius = (int)(width/8);\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n    int white_circle_dia = sun_radius;\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;\n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n    // 根據畫布大小塗上紅色長方形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 先設法以填色畫出六個白色堆疊菱形\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位\n    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度\n    float deg = M_PI/180;\n    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度\n    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小\n    float sr = sun_radius/tan(75*deg);\n    int ax, ay, bx, by, dx, dy, ex, ey;\n    gdPoint points[4];\n    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // AB\n    gdImageLine(img, ax, ay, bx, by, color);\n    // BE\n    gdImageLine(img, bx, by, ex, ey, color);\n    // ED\n    gdImageLine(img, ex, ey, dx, dy, color);\n    // DA\n    gdImageLine(img, dx, dy, ax, ay, color);\n    */\n    ax = center_x;\n    ay = center_y - sun_radius;\n    bx = center_x - sun_radius*tan(15*deg);\n    by = center_y;\n    ex = center_x;\n    ey = center_y + sun_radius;\n    dx = center_x + sun_radius*tan(15*deg);\n    dy = center_y;\n    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域\n    for (int i=1;i<=6;i++){\n    // A\n    points[0].x = ax+sun_radius*sin(30*deg*i);\n    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);\n    // B\n    points[1].x = bx+sr-sr*cos(30*deg*i);\n    points[1].y = by-sr*sin(30*deg*i);\n    // E\n    points[2].x = ex-sun_radius*sin(30*deg*i);\n    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));\n    // D\n    points[3].x = dx-(sr-sr*cos(30*deg*i));\n    points[3].y = dy+sr*sin(30*deg*i);\n    // 對菱形區域範圍塗色\n    gdImageFilledPolygon(img, points, 4, color);\n    // 在菱形區域外圍畫線, 明確界定菱形範圍\n    gdImagePolygon(img, points, 4, color);\n    }\n}\n \n \n // 使用標準輸入/輸出函數\n#include <stdio.h>\n// 繪製gd函式庫\n#include <gd.h>\n\n// void因不會回傳任何值而用於紀錄所需的各項指令及參數\nvoid draw_japan_flag(gdImagePtr img);\n\nint main() {\n    // 設定國旗寬高比為2:3\n    int width = 1200;\n    int height = (int)(width * 2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_japan_flag(img);\n\n    FILE *outputFile = fopen("./../images/japan_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white;\n\n    // 設定顏色\n    red = gdImageColorAllocate(img, 242, 0, 0);  // 日本紅\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n\n    // 在整個畫布上繪製白色矩形\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n\n    // 繪製紅色圓\n   int circle_radius = width / 5;\n   int circle_x = width / 2;\n   int circle_y = height / 2;\n    gdImageFilledEllipse(img, circle_x, circle_y, circle_radius, circle_radius, red);\n}\n \n \n // 使用標準輸入/輸出函數\n#include <stdio.h>\n// 繪製gd函式庫\n#include <gd.h>\n// 繪製數學函數庫\n#include <math.h>\n\n// void因不會回傳任何值而用於紀錄所需的各項指令及參數\nvoid draw_chinese_flag(gdImagePtr img);\n\nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n\n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n\n    draw_chinese_flag(im);\n\n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n\n    return 0;\n}\n\n// 声明 draw_star 函数\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nvoid draw_chinese_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n\n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n\n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n\n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    // 计算星形的五个外点和五个内点\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n\n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n\n    // 使用 gdImageFilledPolygon 绘制星形\n    gdImageFilledPolygon(img, points, 10, color);\n}\n \n \n // 使用標準輸入/輸出函數\n#include <stdio.h>\n// 繪製gd函式庫\n#include <gd.h>\n\n// void因不會回傳任何值而用於紀錄所需的各項指令及參數\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n    // 设置国旗的宽和高\n    int width = 1200;\n    int height = width / 2;\n\n    // 创建图像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    // 绘制英国国旗\n    draw_uk_flag(img);\n\n    // 将图像保存到文件\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时发生错误。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n\n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色\n\n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n\n    int x1, y1, x2, y2, x3, y3;\n\n    // 绘制白色斜线\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n\n\n    // 绘制红色斜线\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n\n  int x1, y1, x2, y2, x3, y3;\n\n  // 绘制  斜线\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n\n\n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  }\n\n    // 绘制白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n\n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n    // 绘制红色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n}\n \n \n // 使用標準輸入/輸出函數\n#include <stdio.h>\n// 繪製gd函式庫\n#include <gd.h>\n\n#define WIDTH 900\n#define HEIGHT 600\n#define FILENAME "south_korea_flag.png"\n\nint main() {\n    gdImagePtr im;\n    FILE *pngout;\n    int white, black, red, blue;\n\n    im = gdImageCreate(WIDTH, HEIGHT);\n\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    red = gdImageColorAllocate(im, 205, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 56, 168);\n\n    // Background (white)\n    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);\n\n    // Blue Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);\n\n    // Red Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);\n\n  int circleX = 385;    // 圓心的 X 座標\n  int circleY = 262.5;   // 圓心的 Y 座標\n  int circleRadius = 75;     \n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);\n\n  int circleX2 = 515;    // 圓心的 X 座標\n\n int circleY2 = 337.5;\n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);\n\n  {\n\n\n  // 起點和終點位置\n\n  int startX = 340;    \n  // 線的起點 X 座標\n\n  int startY = 90;   \n  // 線的起點 Y 座標\n\n  int endX = 200;     \n  // 線的終點 X 座標\n\n  int endY = 260;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 270;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 210;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);\n\n  gdImageSetThickness(im, lineWidth +12);\ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);\n}\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);\n\ngdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 400, 734, 490, white);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 97;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 267;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 212, 734, 118, white);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 277;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 217;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);\n\n    gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);\n\n  }\n\n    // Save image\nFILE *outputFile = fopen("./../images/korea_flag.png", "wb");\nif (outputFile == NULL) {\n    fprintf(stderr, "Error opening the output file.\\n");\n    return 1;\n}\n  gdImagePngEx(im, outputFile, 9);\n      fclose(outputFile);\n      gdImageDestroy(im);\n      return 0;\n  }\n\n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w6', 'text': '// 使用標準輸入/輸出函數\n#include <stdio.h>\n// 繪製gd函式庫\n#include <gd.h>\n// 繪製數學函數庫\n#include <math.h>\n\n// void因不會回傳任何值而用於紀錄所需的各項指令及參數\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    int width = 800;\n    int height = (int)(width / 1.9);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_usa_flag(img);\n\n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field\n\n    int stripe_height = height / 13;\n    int stripe_width = width;\n    int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)\n\n    for (int y = 0; y < height; y += stripe_height) {\n        if (y / stripe_height % 2 == 0) {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n        } else {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n        }\n    }\n\n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\n    int star_spacing_x = (int)(0.063 * height); // Horizontal spacing between stars\n    int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars\n    int star_start_x = (int)(0.0616 * height); // Starting X position for stars\n    int star_start_y = (int)(0.0485 * height); // Starting Y position for stars\n\n    for (int row = 0; row < 9; row++) {\n        int starsPerRow = (row % 2 == 0) ? 6 : 5;\n\n        for (int star = 0; star < starsPerRow; star++) {\n            int x = star_start_x + star * star_spacing_x;\n            int y = star_start_y + row * star_spacing_y;\n            draw_star(img, x, y, star_size, white);\n        }\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color) {\n    gdPoint points[10];\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI / 2 + i * 2 * M_PI / 10;\n        int radius = (i % 2 == 0) ? size : size / 2;\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y + radius * sin(angle);\n    }\n\n    // Fill the star with white color\n    gdImageFilledPolygon(img, points, 10, color);\n}\n \n \n // 使用標準輸入/輸出函數\n#include <stdio.h>\n// 繪製gd函式庫\n#include <gd.h>\n// 繪製數學函數庫\n#include <math.h>\n\n// void因不會回傳任何值而用於紀錄所需的各項指令及參數\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./../images/roc_flag1.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    int sun_radius = (int)(width/8);\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n    // red rectangle area\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    // blue rectangle area\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n    // 目前僅畫出青天白日的輪廓直線, 請嘗試計算所需的點座標完成國旗繪圖\n    draw_white_sun(img, center_x, center_y, sun_radius, white);\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n    float angle = 0;\n    int fromX, fromY;\n    int toX, toY;\n    for (int i=0; i<24; i++){\n        angle += 5*M_PI*2/12;\n        //printf("%.3f", angle);\n        toX = center_x + cos(angle)*sun_radius;\n        toY = center_y + sin(angle)*sun_radius;\n        // 只有 i 為 0 時移動到 toX, toY, 其餘都進行直線繪圖\n        if (i!=0){\n            gdImageLine(img, fromX, fromY, toX, toY, color);\n        }\n        fromX = toX;\n        fromY = toY;\n   }\n}\n \n \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w5', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n\n    return 0;\n}\n\nclear\ncd downloads\ncc gnuplot_ex1.c\n./a.out\n \n \n', 'tags': '', 'url': 'w5.html'}, {'title': '期末總結', 'text': '我認為自己在學期末有65分，雖然整學期下來有幾周的課程作業還是有許多不懂，但在回家時我會看老師上課所錄製的影片並把影片中的所做得內容做出來。 \n', 'tags': '', 'url': '期末總結.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};